---
#
# This playbook inspect and pulls podman images and restarts the
# corresponding systemd workunit
#
# This playbook must be called
# with the following paremeters set:d
#  * PODMAN_REGISTRY_URL: where to fetch the container image
#  * PODMAN_IMAGE_NAME : the podman image name
#  * PODMAN_IMAGE_TAG : the tag of podman_image_name to use
#  * PODMAN_RUN_AS: The user under which "podman pull" will be done (and the service will run under)
#
# Because podman images are specific to a user account (stored in ~/.local) thus not shareable
# between accounts, this playbook *must* be invoked under the account the service corresponding
# to  the podman image will run under.

- name: "SERVICE/CONTAINERS MANAGEMENT PLAYBOOK"
  hosts: all
  connection: local
  gather_facts: yes
  vars:
    facts_file: /etc/ansible/facts.d/coda19.fact

  tasks:

    - name: "FAIL | Args check"
      fail:
        msg: "Bad number of arguments"
      when: "(PODMAN_REGISTRY_URL is undefined or PODMAN_REGISTRY_URL == '') or
             (PODMAN_IMAGE_NAME is undefined or PODMAN_IMAGE_NAME == '' ) or
             (PODMAN_IMAGE_TAG is undefined or PODMAN_IMAGE_TAG == '' ) or
             (PODMAN_RUN_EXTRA_ARGS is undefined or PODMAN_RUN_EXTRA_ARGS == '' ) or
             (PODMAN_RUN_AS is undefined or PODMAN_RUN_AS == '' )"

    - name: "FILE | Ensure /var/run/RUN_AS is present"
      file:
        path: "/var/run/{{ PODMAN_RUN_AS }}"
        mode: 0770
        owner: "{{ PODMAN_RUN_AS }}"
        state: directory

    # Check what exists (locally), remeber podman images are per user account :)
    # if nothing exists, we will see the string  'null'

    - name: SHELL | Check the local image digest
      shell: |
        /usr/bin/podman inspect {{ PODMAN_REGISTRY_URL }}/{{ PODMAN_IMAGE_NAME }}:{{ PODMAN_IMAGE_TAG }} 2> /dev/null | jq '.[0].Digest'
      register: local_image_digest
      become_user: "{{ PODMAN_RUN_AS }}"
      become: yes

    # Check what the remote image digest is

    - name: SHELL | Check the remote image digest
      shell: |
        /usr/bin/skopeo --authfile=/tmp/dummy.json inspect docker://{{ PODMAN_REGISTRY_URL }}/{{ PODMAN_IMAGE_NAME }}:{{ PODMAN_IMAGE_TAG }} 2> /dev/null  | jq '.Digest'
      register: remote_image_digest
      become_user: "{{ PODMAN_RUN_AS }}"
      become: yes
      environment:
        http_proxy: "{{ ansible_local.coda19.site.proxy }}"
        https_proxy: "{{ ansible_local.coda19.site.proxy }}"

    # If the remote image does not exist ...

    - name: FAIL | Missing remote image
      fail:
        msg: "FATAL: Missing remote image : {{ PODMAN_REGISTRY_URL }}/{{ PODMAN_IMAGE_NAME }}:{{ PODMAN_IMAGE_TAG }}"
      when: remote_image_digest.stdout  == ''

    # If the remote image changed, stop the running container and pull the image again
    # do not suppress anything at this time, the next step will catch it (CID file is there but no running container)
    # In the case we have no local image (i.e. local_image_digest.stdout == 'null'), we must skip this step of course...

    - block:

      - name: SHELL | podman stop
        shell: |
          OLD_CID=`cat /var/run/{{ PODMAN_RUN_AS }}/{{ PODMAN_IMAGE_NAME | replace('/','_') }}.cid`
          /usr/bin/podman stop -t 60 ${OLD_CID}
          /usr/bin/podman inspect ${OLD_CID} | /bin/jq '.[0].State.Running' | grep 'true'
          # Return success even grep reports no matches
          exit 0
        register: _podman_stop

      - name: FAIL | Check if the container is still running after a stop which is totally wrong at this point
        fail:
          msg: "A running container cannot be stopped :("
        when: _podman_stop.stdout == 'true'

      when: (remote_image_digest.stdout != local_image_digest.stdout) and (local_image_digest.stdout != 'null')
      become_user: "{{ PODMAN_RUN_AS }}"
      become: yes

    # If the container image has changed (or if we have no initial image) => pull

    - name: PODMAN_IMAGE | Pull the image
      podman_image:
        name: "{{ PODMAN_REGISTRY_URL }}/{{ PODMAN_IMAGE_NAME }}:{{ PODMAN_IMAGE_TAG }}"
        force: yes
      register: _podman_image
      environment:
          http_proxy: "{{ ansible_local.coda19.site.proxy }}"
          https_proxy: "{{ ansible_local.coda19.site.proxy }}"
      when: remote_image_digest.stdout != local_image_digest.stdout
      become_user: "{{ PODMAN_RUN_AS }}"
      become: yes

    # ....If the system is in a clean state, we should not have any cidfile (non-existing as a initial condition, or previously removed in the just above step)
    # in that case (and in that case only), start the service else we will end up by having multiple instances which is obviously not suitable ;)
    # In order to have a  filled-in cidfile, => -d is mandatory

    - name: STAT | Check if the CID file exists
      stat:
        path: "/var/run/{{ PODMAN_RUN_AS }}/{{ PODMAN_IMAGE_NAME | replace('/','_') }}.cid"
      register: _podman_cidfile

    # If a CID file exists, check if we have a running container. If nothing is running _podman_inspect.stdout will contain "false". If an invalid container ID is checked, the output will be empty
    - name: SYSTEM | Inspect for a running container
      ignore_errors: yes
      shell: |
        /usr/bin/podman inspect `cat /var/run/{{ PODMAN_RUN_AS }}/{{ PODMAN_IMAGE_NAME | replace('/','_') }}.cid` 2> /dev/null | /bin/jq '.[0].State.Running' | grep -v null
      register: _podman_inspect
      become_user: "{{ PODMAN_RUN_AS }}"
      become: yes
      when: _podman_cidfile.stat.exists == True

    # If we have "error" on the above "podman inspect" result, that means the container failed to start or died the hard way so remove the CID file to enable
    # the next step to start the container again. Also removes the dead container (might not exist)

    - block:

      - name: SHELL | Remove the dead container (do not abort if this fails)
        ignore_errors: yes
        shell: |
          /usr/bin/podman rm  `cat /var/run/{{ PODMAN_RUN_AS }}/{{ PODMAN_IMAGE_NAME | replace('/','_') }}.cid`
        become_user: "{{ PODMAN_RUN_AS }}"
        become: yes

      - name: FILE | Remove the CID file
        file:
          path: "/var/run/{{ PODMAN_RUN_AS }}/{{ PODMAN_IMAGE_NAME | replace('/','_') }}.cid"
          state: absent

      when: _podman_cidfile.stat.exists == True and not _podman_inspect.stdout == "true"

    # If the CID file survived, do nothing else start the container again

    - name: STAT | Check if the CID file exists (again)
      stat:
        path: "/var/run/{{ PODMAN_RUN_AS }}/{{ PODMAN_IMAGE_NAME | replace('/','_') }}.cid"
      register: _podman_cidfile

    - name: SHELL | podman run
      shell: |
        /usr/bin/podman run --log-driver=journald --cidfile=/var/run/{{ PODMAN_RUN_AS }}/{{ PODMAN_IMAGE_NAME | replace('/','_') }}.cid -d {{ PODMAN_RUN_EXTRA_ARGS }} {{ PODMAN_REGISTRY_URL }}/{{ PODMAN_IMAGE_NAME }}:{{ PODMAN_IMAGE_TAG }}
      become_user: "{{ PODMAN_RUN_AS }}"
      become: yes
      when: _podman_cidfile.stat.exists == False

    # At this point, we should have a running container, if it is not the case the next execution of this playbook will see a CID file but no running container with hat CID so the container will be started again.
