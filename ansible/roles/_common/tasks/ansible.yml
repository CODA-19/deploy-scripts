---

###### ANSIBLE-VENV

- name: "LEGACY VENV | PIP | {{ _common_ansible_venv1_path }} - Upgrade pip to latest"
  pip:
    virtualenv: "{{ _common_ansible_venv1_path }}"
    state: latest
    name: pip

- name: "LEGACY VENV | PIP | {{ _common_ansible_venv1_path }} - Remove unused packages"
  pip:
    virtualenv: "{{ _common_ansible_venv1_path }}"
    state: absent
    name:
      - botocore
      - boto3
      - s3transfer

## MANAGE THE FIRST VENV

- when: _common_ansible_venv1_managed|bool
  block:

    - name: "VENV1 | COPY | requirements.txt -> /opt/coda19/ansible-requirements.txt"
      copy:
        src: "{{ inventory_dir }}/requirements.txt"
        dest: /opt/coda19/ansible-requirements.txt

    - name: "VENV1 | PIP | {{ _common_ansible_venv1_path }} - Ensure we have latest pip, setuptools and wheel"
      pip:
        virtualenv: "{{ _common_ansible_venv1_path }}"
        virtualenv_python: /usr/bin/python3
        name:
          - pip
          - setuptools
          - wheel
        state: latest

    - name: "VENV1 | PIP | Install requirements"
      pip:
        virtualenv: "{{ _common_ansible_venv1_path }}"
        requirements: /opt/coda19/ansible-requirements.txt

## MANAGE THE SECOND VENV

- when: _common_ansible_venv2_managed|bool
  block:

    - name: "VENV2 | COPY | requirements.txt -> /opt/coda19/ansible-requirements.txt"
      copy:
        src: "{{ inventory_dir }}/requirements.txt"
        dest: /opt/coda19/ansible-requirements.txt

    - name: "VENV2 | PIP | {{ _common_ansible_venv2_path }} - Ensure we have latest pip, setuptools and wheel"
      pip:
        virtualenv: "{{ _common_ansible_venv2_path }}"
        virtualenv_python: /usr/bin/python3
        name:
          - pip
          - setuptools
          - wheel
        state: latest

    - name: "VENV2 | PIP | Install requirements"
      pip:
        virtualenv: "{{ _common_ansible_venv2_path }}"
        requirements: /opt/coda19/ansible-requirements.txt

###### ANSIBLE VENV - AUTOMATIC IMPLEMENTATION

- name: "VENV-AUTO | COPY | requirements.txt -> /opt/coda19/ansible-requirements-automatic.txt"
  copy:
    src: "{{ inventory_dir }}/requirements.txt"
    dest: /opt/coda19/ansible-requirements-automatic.txt

- name: "VENV-AUTO | STAT | /opt/coda19/ansible-requirements-automatic.txt"
  stat:
    path: /opt/coda19/ansible-requirements-automatic.txt
    checksum_algorithm: md5
  register: _stat

- name: "VENV-AUTO | SET_FACT | _common_ansible_venv_automatic_path"
  set_fact:
    # be safe: md5 hash of the file; this will be removed in Ansible 2.9 in favor of the checksum return value
    # see: https://docs.ansible.com/ansible/latest/collections/ansible/builtin/stat_module.html
    _common_ansible_venv_automatic_path: "/opt/coda19/venv-ansible-{{ _stat.stat.checksum | default(_stat.stat.md5) }}"

- name: "VENV-AUTO | DEBUG | _common_ansible_venv_automatic_path"
  debug:
    var: _common_ansible_venv_automatic_path

- name: "VENV-AUTO | PIP | {{ _common_ansible_venv2_path }} - Ensure we have latest pip, setuptools and wheel"
  pip:
    virtualenv: "{{ _common_ansible_venv_automatic_path }}"
    virtualenv_python: /usr/bin/python3
    name:
      - pip
      - setuptools
      - wheel
    state: latest

- name: "VENV-AUTO | PIP | Install requirements"
  pip:
    virtualenv: "{{ _common_ansible_venv_automatic_path }}"
    requirements: /opt/coda19/ansible-requirements-automatic.txt

###### ANSIBLE-ACTIVATORS

- name: TEMPLATE | Generate activators - /etc/profile.d/env-ansible.sh
  template:
    src: etc/profile.d/env-ansible.sh.j2
    dest: /etc/profile.d/env-ansible.sh
    mode: 0744

- name: FILE | Remove /usr/local/bin/env-ansible.sh
  file:
    path: /usr/local/bin/env-ansible.sh
    state: absent

###### ANSIBLE-PULL

- name: TEMPLATE | Generate /usr/local/bin/execute-ansible-pull.sh
  template:
    src: usr/local/bin/execute-ansible-pull.sh.j2
    dest: /usr/local/bin/execute-ansible-pull.sh
    mode: 0750

- name: CRON | Create ansible-pull cron job
  cron:
    name: "{{ _common_ansible_pull_cron_name }}"
    job: /usr/local/bin/execute-ansible-pull.sh >/dev/null
    minute: "*/{{ _common_ansible_pull_cron_interval }}"
    user: root
    disabled: "{{ _common_ansible_pull_disabled | bool }}"
