---

################################################################################
### "{{ task_title }}"
################################################################################

- name: "{{ task_title }} | GROUP | Add the group '{{ container_name }}'"
  group:
    name: "{{ container_name }}"
    system: no

- name: "{{ task_title }} | USER | Add the user '{{ container_name }}'"
  user:
    name: "{{ container_name }}"
    group: "{{ container_name }}"
    home: "/var/lib/{{ container_name }}"
    system: no

- name: "{{ task_title }} | TEMPLATE | Generate /etc/default/{{ container_name }}"
  template:
    src: "etc/default/{{ container_name }}.j2"
    dest: "/etc/default/{{ container_name }}"
    owner: "{{ container_name }}"
    group: "{{ container_name }}"
    mode: 0640
  notify:
    - "restart {{ container_name }}"

- name: "{{ task_title }} | TEMPLATE | Copy systemd service unit"
  template:
    src: etc/systemd/system/coda19-container-api.service.j2
    dest: "/etc/systemd/system/{{ container_name }}.service"
    owner: root
    group: root
    mode: 0664
  notify:
    - "restart {{ container_name }}"

# Create data directory
- name: "{{ task_title }} | FILE | Ensure /data/{{ container_name }} is present"
  file:
    dest: "/data/{{ container_name }}"
    owner: "{{ container_name }}"
    group: "{{ container_name }}"
    mode: 0750
    state: directory

# Create SELinux rules to make this service work correctly (CentOS 7 only)
- block:

    - name: "{{ task_title }} | SELINUX | FILE | Ensure target directory exists: {{ _selinux_module_dir }}"
      file:
        path: "{{ _selinux_module_dir }}"
        state: directory

    - name: "{{ task_title }} | SELINUX | COPY | {{ _selinux_module_dir }}/{{ _selinux_module_name }}.te"
      copy:
        src: "etc/selinux/coda19/{{ _selinux_module_name }}.te"
        dest: "{{ _selinux_module_dir }}/{{ _selinux_module_name }}.te"
      register: _selinux

    - name: "{{ task_title }} | SELINUX | COMMAND | checkmodule"
      command: checkmodule -M -m -o {{ _selinux_module_name }}.mod {{ _selinux_module_name }}.te
      args:
        chdir: "{{ _selinux_module_dir }}"
      when: _selinux.changed

    - name: "{{ task_title }} | SELINUX | COMMAND | semodule_package"
      command: semodule_package -o {{ _selinux_module_name }}.pp -m {{ _selinux_module_name }}.mod
      args:
        chdir: "{{ _selinux_module_dir }}"
      when: _selinux.changed

    - name: "{{ task_title }} | SELINUX | COMMAND | semodule"
      command: semodule -i {{ _selinux_module_name }}.pp
      args:
        chdir: "{{ _selinux_module_dir }}"
      when: _selinux.changed

  vars:
    _selinux_module_dir: /etc/selinux/coda19
    _selinux_module_name: "{{ container_name }}"
  when:
    - ansible_distribution == "CentOS"
    - ansible_distribution_major_version == '7'    

# # Clean up old images
# - name: "{{ task_title }} | SHELL | cleanup old images"
#   shell: |
#     podman system prune --all --force && podman rmi --all
#   changed_when: false
#   failed_when: false
#   become: yes
#   become_user: "{{ container_name }}"

# Get remote image digest and print
- name: "{{ task_title }} | SHELL | Get remote image digest"
  shell: |
    /usr/bin/skopeo inspect --no-creds docker://{{ ul_coda19_docker_image_registry }}/{{ docker_image_name }}:{{ docker_image_tag }} |  jq -r '.Digest'
  changed_when: false
  failed_when: false
  register: _image_remote

- name: "{{ task_title }} | DEBUG | Remote image digest"
  debug:
    var: _image_remote.stdout

# Get local image digest and print
- name: "{{ task_title }} | SHELL | Get local image digest"
  shell: |
    /usr/bin/podman inspect --format '{{ '{{' }} .Digest {{ '}}' }}' {{ ul_coda19_docker_image_registry }}/{{ docker_image_name }}:{{ docker_image_tag }} 2>/dev/null
  changed_when: false
  failed_when: false
  register: _image_local
  become: yes
  become_user: "{{ container_name }}"

- name: "{{ task_title }}| DEBUG | Local image digest"
  debug:
    var: _image_local.stdout

# Ensure image is present
# Force a pull when remote digest is different from local one
- name: "{{ task_title }} | PODMAN_IMAGE | Pull image"
  podman_image:
    name: "{{ ul_coda19_docker_image_registry }}/{{ docker_image_name }}"
    tag: "{{ docker_image_tag }}"
    state: present
    force: "{{ (_image_remote.stdout == _image_local.stdout) | ternary(False, True) }}"
  become: yes
  become_user: "{{ container_name }}"
  notify:
    - "restart {{ container_name }}"