---

#------------------------------------------------------------------------------
# BASIC SETTINGS
#------------------------------------------------------------------------------

ul_postgresql_cluster_id: default
ul_postgresql_version: 12

#------------------------------------------------------------------------------
# INSTALLATION OPTIONS AND SCOPE
#------------------------------------------------------------------------------

ul_postgresql_install_contrib: yes
ul_postgresql_install_devel: no

ul_postgresql_install_postgis: no
ul_postgresql_install_postgis_version: 3.0

ul_postgresql_install_pgaudit: no

ul_postgresql_install_check_postgres: no

# Other extension packages to install
#
# Example:
#
# ul_postgresql_install_extensions:
#   - timescaledb
#   - citus

ul_postgresql_install_extensions: []

#------------------------------------------------------------------------------
# ENVIRONMENT AND INITDB SETTINGS
#------------------------------------------------------------------------------

ul_postgresql_encoding: "UTF-8"
ul_postgresql_data_checksums: true
ul_postgresql_pwfile: ""
ul_postgresql_wal_segsize: 16

ul_postgresql_locale_parts:
  - "en_CA" # Locale
  - "UTF-8" # Encoding
ul_postgresql_locale: "{{ ul_postgresql_locale_parts | join('.') }}"
ul_postgresql_ctype_parts:
  - "en_CA" # Locale
  - "UTF-8" # Encoding
ul_postgresql_ctype: "{{ ul_postgresql_ctype_parts | join('.') }}"

ul_postgresql_env:
  LC_ALL: "{{ ul_postgresql_locale }}"
  LC_LCTYPE: "{{ ul_postgresql_locale }}"

#------------------------------------------------------------------------------
# MISCELLANEOUS
#------------------------------------------------------------------------------

#### Reset the installation
# You shuld never specify this setting permanently in a vars file.
# Instead, overwrite at command line with --extra-vars|-e option

ul_postgresql_reset: no

#------------------------------------------------------------------------------
# DATABASE ACCOUNTS TO PROVISION
#------------------------------------------------------------------------------

# List of superusers to be created (optional)
# They'll also be used for superadmin access rules in pg_hba.conf

ul_postgresql_superusers: []

# List of roles (non-login roles) to be created (optional)
#
# Does not support removal (state parameter)

ul_postgresql_roles: []

# List of users (login roles) to be created (optional)
#
# Because we can specify passwords in this structure, it is advised to use
# an ansible-vault to store this list.
#
# Does not support removal (state parameter)

ul_postgresql_users: []

# List of users (roles) to be associated to which groups (non-login role)

ul_postgresql_users_roles: []

# List of databases to be created (optional)

ul_postgresql_databases: []

# List of database extensions to be created (optional)

ul_postgresql_database_extensions: []

# List of schemas to be created (optional)

ul_postgresql_database_schemas: []

# List of  .pgpass entries to create on each database nodes
# Because this list contains passwords, this sould be stored in a vault.

ul_postgresql_pgpass: []

#------------------------------------------------------------------------------
# PG_HBA.CONF RELATED SETTINGS
#------------------------------------------------------------------------------

# Do we let this role manage pg_hba.conf

ul_postgresql_manage_pg_hba: yes

# Default auth method used for local and hosts authentication types
# Used by initdb and for default rules defined below

ul_postgresql_default_auth_method_local: "peer"
ul_postgresql_default_auth_method_host: "md5"

# Default pg_hba.conf rules

ul_postgresql_pg_hba_default:
  # Connections to local socket and localhost (127.0.0.1)
  - { type: local,  database: all,          user: all,      address: "",              method: "{{ ul_postgresql_default_auth_method_local }}" }
  - { type: host,   database: all,          user: all,      address: "127.0.0.1/32",  method: "{{ ul_postgresql_default_auth_method_host }}"  }
  - { type: host,   database: all,          user: all,      address: "::1/128",       method: "{{ ul_postgresql_default_auth_method_host }}"  }
  # Replication
  - { type: local,  database: replication,  user: all,      address: "",              method: peer }
  - { type: host,   database: replication,  user: all,      address: "127.0.0.1/32",  method: md5  }
  - { type: host,   database: replication,  user: all,      address: "::1/128",       method: md5  }
  - { type: host,   database: replication,  user: all,      address: "samenet",       method: md5  }

# pg_hba.conf rules to apply for superusers

ul_postgresql_pg_hba_superusers: []

# Custom pg_hba.conf rules

ul_postgresql_pg_hba_custom:
  # By default permit any connection using local accounts
  - { type: host,   database: all,          user: all,      address: all,             method: md5  }

# Custom pg_ident.conf entries
#
# Example:
#  - comment: "root is allowed to login as {{ ul_postgresql_admin_user }}"
#    mapname: "root_as_{{ ul_postgresql_admin_user }}"
#    system_username: "root"
#    pg_username: "{{ ul_postgresql_admin_user }}"

ul_postgresql_pg_ident: []

#------------------------------------------------------------------------------
# BACKUP SETTINGS
#------------------------------------------------------------------------------

# <REDACTED>

#------------------------------------------------------------------------------
# POSTGRESQL.CONF RELATED SETTINGS
#------------------------------------------------------------------------------#
#
# These settings are used by template/conf.d/10-ansible-managed.conf.j2
# Defaults are sensible and best effort for a good default configuration..
#
# You can overwrite specific parameters by specifying custom values or simply
# use ul_postgresql_custon_conf freeform variable. This variable is quite useful
# when you need to specify variables not managed by this role.
#
# You can use some configuration helpers and save returned value in this var.
# Example:
#   https://pgtune.leopard.in.ua/#/
#   http://pgconfigurator.cybertec.at/
#   https://www.pgconfig.org
#

#### CONNECTIONS AND AUTHENTICATION

ul_postgresql_port: 5432
ul_postgresql_max_connections: 100
ul_postgresql_superuser_reserved_connections: 5

ul_postgresql_shared_buffers_max_mb:  8192
ul_postgresql_shared_buffers:         "{{ [ (ansible_memtotal_mb * 0.25 ), ul_postgresql_shared_buffers_max_mb ] | min | int }}MB"

ul_postgresql_temp_buffers:         8MB
ul_postgresql_work_mem:             "{{ ((ansible_memtotal_mb * 0.25) / ul_postgresql_max_connections) | int }}MB"
ul_postgresql_maintenance_work_mem: "{{ ((ansible_memtotal_mb * 0.25) / ansible_processor_cores      ) | int }}MB"

#### SSL SETTINGS
#
# By default we generate self signed SSL certificate.
#
# For CA signed certificates, use these vars:
#   - ul_postgresql_ssl_key_content
#   - ul_postgresql_ssl_cert_content
#
# Beware, the cert content must be a bundle with correct order.
# See: https://wiki.dti.ulaval.ca/x/P0opBQ
#
# By default, files are stored directly under ul_postgresql_data_directory

ul_postgresql_ssl: yes

ul_postgresql_ssl_key_content: ""
ul_postgresql_ssl_cert_content: ""

ul_postgresql_ssl_key_file: "{{ ul_postgresql_data_directory }}/server.key"
ul_postgresql_ssl_cert_file: "{{ ul_postgresql_data_directory }}/server.crt"

  # Target files example
  #ul_postgresql_ssl_cert_file: "/etc/pki/tls/private/postgresql-server.key"
  #ul_postgresql_ssl_key_file: "/etc/pki/tls/certs/postgresql-server.crt"

#### WRITE-AHEAD LOG

ul_postgresql_checkpoint_timeout:           10min
ul_postgresql_max_wal_size:                 5GB
ul_postgresql_min_wal_size:                 1GB
ul_postgresql_checkpoint_completion_target: 0.9

ul_postgresql_archive_mode:                 'off'
ul_postgresql_archive_command:              "/bin/true"

#### QUERY TUNING

ul_postgresql_random_page_cost:     "{{ '2.0' if ansible_product_version.startswith('Hyper-V') else  '4.0' }}"
ul_postgresql_effective_cache_size: "{{ (ansible_memtotal_mb * 0.75) | int }}MB"

#### REPORTING AND LOGGING

ul_postgresql_log_filename:       "postgresql-%Y-%m-%dT%H%M%S.log"
ul_postgresql_log_rotation_age:   1d
ul_postgresql_log_rotation_size:  0           # 0 to disable, size like 1024MB accepted

ul_postgresql_log_min_duration_statement:   5000
ul_postgresql_log_checkpoints:              'on'
ul_postgresql_log_connections:              'on'
ul_postgresql_log_disconnections:           'on'
ul_postgresql_log_line_prefix:              "%m [%u]@[%d] [%p] "
ul_postgresql_log_lock_waits:               'on'
ul_postgresql_log_statement:                ddl                   # none | dll | mod | all
ul_postgresql_log_temp_files:               0

#### STATISTICS

ul_postgresql_track_io_timing:            'on'
ul_postgresql_track_functions:            pl
ul_postgresql_track_activity_query_size:  4096

#### OTHERS

ul_postgresql_shared_preload_libraries: []
ul_postgresql_custom_conf: ""

#------------------------------------------------------------------------------
# FILE LOCATIONS
#------------------------------------------------------------------------------

ul_postgresql_data_directory: "/var/lib/pgsql/{{ ul_postgresql_version }}/data"
ul_postgresql_wal_directory:  ""
ul_postgresql_log_directory: ""

#------------------------------------------------------------------------------
# REPOSITORY SETTINGS
#------------------------------------------------------------------------------

# Install repo, or rely on existing configuration (Satellite, Artifactory, etc.)
ul_postgresql_install_repository: yes

# YUM repository locations
ul_postgresql_yum_repository_url: "http://yum.postgresql.org"
ul_postgresql_pgdg_repository_url: "https://download.postgresql.org/pub/repos/yum"

# YUM (RedHat, CentOS, etc.) baseurl/gpgkey
ul_postgresql_yum_repository_common_baseurl: "{{ ul_postgresql_yum_repository_url }}/common/{{ ansible_os_family | lower }}/rhel-{{ ansible_distribution_major_version }}-{{ ansible_architecture }}"
ul_postgresql_yum_repository_baseurl: "{{ ul_postgresql_yum_repository_url }}/{{ ul_postgresql_version }}/{{ ansible_os_family | lower }}/rhel-{{ ansible_distribution_major_version }}-{{ ansible_architecture }}"
ul_postgresql_yum_repository_gpgkey: "{{ ul_postgresql_pgdg_repository_url }}/RPM-GPG-KEY-PGDG-{{ ul_postgresql_version_terse }}"

#------------------------------------------------------------------------------
# CALCULATED AND DERIVED VARS
#------------------------------------------------------------------------------

ul_postgresql_version_terse: "{{ ul_postgresql_version | replace('.', '') }}"  # Short version of the postgresql_version, used in some path and filenames

ul_postgresql_install_postgis_version_terse: "{{ ul_postgresql_install_postgis_version | replace('.', '') }}"
ul_postgresql_install_postgis_deps:
  - "postgis{{ ul_postgresql_install_postgis_version_terse }}_{{ ul_postgresql_version }}"
  - "postgis{{ ul_postgresql_install_postgis_version_terse }}_{{ ul_postgresql_version }}-utils"
  - "postgis{{ ul_postgresql_install_postgis_version_terse }}_{{ ul_postgresql_version }}-client"

ul_postgresql_replication_identifier: "{{ ansible_hostname | replace('-', '_') }}"
