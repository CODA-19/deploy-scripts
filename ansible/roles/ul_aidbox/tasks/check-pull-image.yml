# Clean up old images
- name: "SHELL | cleanup old images for {{ container_name }}"
  shell: |
    podman image prune --all
  changed_when: false
  failed_when: false
  become: yes
  become_user: "{{ container_name }}"

# Get remote image digest and print
- name: "SHELL | Get remote image digest for {{ container_name }}"
  shell: |
    /usr/bin/skopeo inspect --no-creds docker://{{ image_registry }}/{{ image_name }}:{{ image_tag }} |  jq -r '.Digest'
  changed_when: false
  failed_when: false
  register: _image_remote

- name: "DEBUG | Remote image digest for {{ container_name }}" 
  debug:
    var: _image_remote.stdout

# Get local image digest and print
- name: "SHELL | Get local image digest for {{ container_name }}"
  shell: |
    /usr/bin/podman inspect {{ image_registry }}/{{ image_name }}:{{ image_tag }} | jq -r '.[0].Digest'
  changed_when: false
  failed_when: false
  register: _image_local
  become: yes
  become_user: "{{ container_name }}"

- name: "DEBUG | Local image digest for {{ container_name }}"
  debug:
    var: _image_local.stdout

- set_fact:
    _image_local.stdout: ''

# Ensure image is present
# Force a pull when remote digest is different from local one.
# In the case the remote image state checksum is empty (this happens if dockerhub rejects us because of a reached request limit),
# Do not pull anything and leave what exists locally alone.
- name: "PODMAN_IMAGE | Pull image for {{ container_name }}"
  podman_image:
    name: "{{ image_registry }}/{{ image_name }}"
    tag: "{{ image_tag }}"
    state: present
    force: yes
  become: yes
  become_user: "{{ container_name }}"
  notify:
    - "restart {{ container_name }}"
  when: (_image_remote.stdout != _image_local.stdout) and _image_remote.stdout != ''
